// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Links {
  id             String      @id @default(cuid())
  originalUrl    String
  shortCode      String      @unique
  description    String?
  userId         String
  createBy       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  clickCount     Int         @default(0)
  lastClicked    DateTime?
  urlClicks      UrlClicks[]
  createdAt      DateTime    @default(now())
  expirationDate DateTime

  @@index([userId, shortCode])
}

model UrlClicks {
  id        String   @id @default(cuid())
  urlId     String
  clickedAt DateTime @default(now())
  ipAddress String
  userAgent String
  referrer  String?

  link Links @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@index([urlId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  limitLinks    Int       @default(30)
  accounts      Account[]
  sessions      Session[]
  links         Links[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
